version: '3'

networks:
  net-back:
    driver: bridge
  net-front:
    driver: bridge

volumes:
  vol-mongo:
  vol-nginx:


services:

  py-flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: py-flask
    image: maiconnf1980/app-rotten-potatoes:v1
    ports:
      - 5000:5000
    environment:
      APP_PORT: 5000
      MONGODB_DB: admin
      MONGODB_DATABASE: admin
      MONGODB_USERNAME: mongouser
      MONGODB_PASSWORD: mongopwd
      MONGODB_HOSTNAME: mongodb
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
    depends_on:
      - mongodb
    networks:
      - net-back
      - net-front

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopwd
      MONGO_INITDB_DATABASE: admin
      MONGODB_DATABASE: admin
      MONGODB_USER: mongouser
      MONGODB_PASS: mongopwd
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    ports:
      - "27017:27017"
    volumes:
      - vol-mongo:/data/db
    networks:
      - net-back

  webapp:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: fernandomj90/nginx-alpine-desafio-docker:3.15.4
    container_name: webapp
    restart: unless-stopped
    tty: true
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webapp"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - py-flask
    networks:
      - net-front

    mongo-express:
      image: mongo-express:latest
      container_name: mongo-express
      restart: unless-stopped
      ports:
        - 8081:8081
      networks:
        - net-back
      depends_on:
        - mongodb
      environment:
        ME_CONFIG_MONGODB_SERVER: mongodb
        ME_CONFIG_MONGODB_ADMINUSERNAME: mongouser
        ME_CONFIG_MONGODB_ADMINPASSWORD: mongopwd